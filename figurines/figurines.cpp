#include <bits/stdc++.h> 
#pragma gcc optimize("Ofast") 
using namespace std; vector < vector < int > > blo; vector < int > cur; vector < vector < int > > ad; vector < vector < int > > rem; int k = 3; int c = 0; void init(int n) { 	k = sqrt(n); 	blo.resize(n/k + 1, vector < int > (n, 0)); 	cur.resize(n, 0); 	ad.resize(n+1); 	rem.resize(n+1); } void log(vector<int>& added, vector<int>& removed) { 	c++; 	for (int f : added) 	{ 		cur[f] = 1; 		ad[c].push_back(f); 	} 	for (int f : removed) 	{ 		cur[f] = 0; 		rem[c].push_back(f); 	} 	if (c % k == 0) 	{ 		blo[c/k] = cur; 		for (int i = blo[c/k].size() - 2; i >= 0; i--) 		{ 			blo[c/k][i] = blo[c/k][i+1] + blo[c/k][i]; 		} 	} } int answer(int d, int x) { 	int blid = (d)/k; 	int ans = blo[blid][x]; 	 	for (int i = blid * k+1; i <= d; i++) 	{ 		for (int f : ad[i]) 		{ 			if (f >= x) ans++; 		} 		for (int f : rem[i]) 		{ 			if (f >= x) ans--; 		} 	} 	return ans; }